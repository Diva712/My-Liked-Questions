You are given a 0-indexed integer array nums, and you are allowed to traverse between its indices. You can traverse between index i and index j, i != j, if and only if gcd(nums[i], nums[j]) > 1, where gcd is the greatest common divisor.

Your task is to determine if for every pair of indices i and j in nums, where i < j, there exists a sequence of traversals that can take us from i to j.

Return true if it is possible to traverse between all such pairs of indices, or false otherwise.

 

Example 1:

Input: nums = [2,3,6]
Output: true
Explanation: In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).
To go from index 0 to index 1, we can use the sequence of traversals 0 -> 2 -> 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 > 1.
To go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 > 1.
Example 2:

Input: nums = [3,9,5]
Output: false
Explanation: No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.
Example 3:

Input: nums = [4,3,12,8]
Output: true
Explanation: There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105


Solution:

class DSU{
    vector<int>rank;
    vector<int>parent;
    int components;
public:
    DSU(int n){
        rank.resize(n);
        parent.resize(n);
        components = n;

        for(int i=0; i<n; i++){
            parent[i] = i;
            rank[i] = 0;
        }
    }

    int find(int x){

        if(x == parent[x]){
            return x;
        }

        return parent[x] = find(parent[x]);
    }

   void UNION (int x , int y){

        int x_parent = find(x);
        int y_parent = find(y);

     
        if(x_parent!=y_parent){
            if(rank[x_parent] > rank[y_parent]){
                parent[y_parent] = x_parent;
            }
            else if(rank[x_parent] < rank[y_parent]){
                parent[x_parent] = y_parent;
            }
            else{
                parent[x_parent] = y_parent;
                rank[y_parent]++;
            }
            components--;
        }
    }

    int count(){
        return components;
    }
};

class Solution {
public:
    bool canTraverseAllPairs(vector<int>& nums) {
        unordered_map<int,int>prime;
        int n = nums.size();
        DSU d(n);

        for(int i=0; i<n; i++){

            for(int f = 2; f*f<=nums[i]; f++){

                if(nums[i]%f !=0){
                    continue;
                }


                if(prime.find(f) == prime.end()){
                    prime[f] = i;
                }
                else{
                    int idx = prime[f];
                    d.UNION(idx , i);
                }

                while(nums[i]%f == 0){
                    nums[i] = nums[i]/f;
                }
            }


            if(nums[i] > 1){

                if(prime.find(nums[i]) == prime.end()){
                    prime[nums[i]] = i;
                }
                else{
                    int idx = prime[nums[i]];
                    d.UNION(idx , i);
                }

            }
        }

        if(d.count() == 1){
            return true;
        }


        return false;
    }
};
