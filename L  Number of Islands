Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1


Solution :
maine pehle visited le kar check kiya but usse answer 9 aa rha tha to some time glti hone ke cahnces reh jate hai to jb hum dfs me grid dalenge to usko grid[i][j] = '0' se replace kr denge 1 wale grid cell ki value.

class Solution {
public:
    void dfs(int row , int col ,  vector<vector<char>>&grid , int n , int m){

        //vis[row][col] = 1;
        grid[row][col] ='0';
        int d_row[4] = {0,-1,0,+1};
        int d_col[4] = {-1,0,+1,0};
        for(int i=0; i<4; i++){
            int nrow = row + d_row[i];
            int ncol = col + d_col[i];

            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1'){
                dfs(nrow,ncol,grid,n,m);
            }
        }
        return;
    }
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int cnt = 0;
        vector<vector<int>>vis(n , vector<int>(m,0));
        for(int i=0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(grid[i][j]=='1'){
                    cnt++;
                    dfs(i,j,grid,n,m);
                }
            }
        }
        return cnt;
    }
};
